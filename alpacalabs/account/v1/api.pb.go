// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alpacalabs/account/v1/api.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("alpacalabs/account/v1/api.proto", fileDescriptor_03cae58ae5df80bb) }

var fileDescriptor_03cae58ae5df80bb = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcc, 0x29, 0x48,
	0x4c, 0x4e, 0xcc, 0x49, 0x4c, 0x2a, 0xd6, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0xd1, 0x2f,
	0x33, 0xd4, 0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x45, 0x28, 0xd0,
	0x83, 0x2a, 0xd0, 0x2b, 0x33, 0x94, 0x52, 0xc7, 0xa9, 0x2f, 0x1e, 0xa6, 0x0a, 0xac, 0x5f, 0x4a,
	0x15, 0xb7, 0xc2, 0xd4, 0xdc, 0xc4, 0xcc, 0x1c, 0x88, 0x32, 0xa3, 0x29, 0x6c, 0x5c, 0x7c, 0x8e,
	0x10, 0xe9, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0xa1, 0x1c, 0x2e, 0x5e, 0xe7, 0xa2, 0xd4,
	0xc4, 0x92, 0x54, 0xa8, 0xb8, 0x90, 0xb6, 0x1e, 0x56, 0xb7, 0xe8, 0xa1, 0xa8, 0x0a, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0xd2, 0x21, 0x4e, 0x71, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x12,
	0x83, 0x50, 0x35, 0x97, 0x10, 0x44, 0xca, 0x15, 0xe4, 0x2a, 0xc7, 0x94, 0x94, 0xa2, 0xd4, 0xe2,
	0x62, 0x21, 0x03, 0xbc, 0xa6, 0x20, 0x2b, 0x85, 0xd9, 0x6b, 0x48, 0x82, 0x0e, 0xb8, 0xe5, 0x75,
	0x5c, 0xc2, 0xce, 0xf9, 0x79, 0x69, 0x99, 0x45, 0xb9, 0x28, 0xb6, 0xe3, 0x34, 0x0b, 0x53, 0x2d,
	0xcc, 0x7a, 0x23, 0x52, 0xb4, 0xc0, 0xed, 0xaf, 0xe0, 0x12, 0x74, 0x4f, 0x2d, 0x41, 0x96, 0x4c,
	0x2d, 0x16, 0xd2, 0xc7, 0x61, 0x14, 0x86, 0x4a, 0x98, 0xdd, 0x06, 0xc4, 0x6b, 0x40, 0xf6, 0x39,
	0x9a, 0xb4, 0x53, 0xa5, 0xa7, 0x0b, 0x4e, 0x9f, 0x63, 0x51, 0x4b, 0xc8, 0xe7, 0x58, 0xb5, 0xc0,
	0xed, 0x9f, 0xc3, 0xc8, 0x25, 0x8b, 0xe1, 0x3e, 0xb7, 0xfc, 0x22, 0x68, 0x02, 0xf1, 0x74, 0x11,
	0xb2, 0x26, 0xd6, 0x57, 0xc8, 0xba, 0x60, 0x8e, 0xb2, 0x21, 0x4f, 0x33, 0xcc, 0x79, 0x4e, 0x8b,
	0x19, 0xb9, 0x24, 0x93, 0xf3, 0x73, 0xb1, 0x9b, 0xe2, 0xc4, 0x03, 0xd5, 0x12, 0x00, 0xca, 0x42,
	0x01, 0x8c, 0x51, 0x0e, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x8e,
	0x60, 0x1d, 0x3e, 0xa0, 0x6c, 0x07, 0xce, 0x61, 0x45, 0xa9, 0x05, 0xf9, 0xba, 0x50, 0xbd, 0xba,
	0xe9, 0xf9, 0xfa, 0x58, 0xb3, 0xe5, 0x22, 0x26, 0x66, 0x47, 0x1f, 0xc7, 0x55, 0x4c, 0xa2, 0x08,
	0xdd, 0x7a, 0x50, 0x3b, 0xf4, 0xc2, 0x0c, 0x4f, 0x21, 0x8b, 0xc7, 0x40, 0xc5, 0x63, 0xc2, 0x0c,
	0x93, 0xd8, 0xc0, 0x36, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x73, 0xaa, 0xd8, 0xbd, 0x4d,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CreateEmailAddress(ctx context.Context, in *CreateEmailAddressRequest, opts ...grpc.CallOption) (*CreateEmailAddressResponse, error)
	ConfirmEmailAddress(ctx context.Context, in *ConfirmEmailAddressRequest, opts ...grpc.CallOption) (*ConfirmEmailAddressResponse, error)
	GetEmailAddresses(ctx context.Context, in *GetEmailAddressesRequest, opts ...grpc.CallOption) (*GetEmailAddressesResponse, error)
	GetEmailAddressByID(ctx context.Context, in *GetEmailAddressByIDRequest, opts ...grpc.CallOption) (*GetEmailAddressByIDResponse, error)
	GetEmailAddressesForAccountID(ctx context.Context, in *GetEmailAddressesForAccountIDRequest, opts ...grpc.CallOption) (*GetEmailAddressesForAccountIDResponse, error)
}

type accountServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountServiceClient(cc *grpc.ClientConn) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.account.v1.AccountService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateEmailAddress(ctx context.Context, in *CreateEmailAddressRequest, opts ...grpc.CallOption) (*CreateEmailAddressResponse, error) {
	out := new(CreateEmailAddressResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.account.v1.AccountService/CreateEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ConfirmEmailAddress(ctx context.Context, in *ConfirmEmailAddressRequest, opts ...grpc.CallOption) (*ConfirmEmailAddressResponse, error) {
	out := new(ConfirmEmailAddressResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.account.v1.AccountService/ConfirmEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetEmailAddresses(ctx context.Context, in *GetEmailAddressesRequest, opts ...grpc.CallOption) (*GetEmailAddressesResponse, error) {
	out := new(GetEmailAddressesResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.account.v1.AccountService/GetEmailAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetEmailAddressByID(ctx context.Context, in *GetEmailAddressByIDRequest, opts ...grpc.CallOption) (*GetEmailAddressByIDResponse, error) {
	out := new(GetEmailAddressByIDResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.account.v1.AccountService/GetEmailAddressByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetEmailAddressesForAccountID(ctx context.Context, in *GetEmailAddressesForAccountIDRequest, opts ...grpc.CallOption) (*GetEmailAddressesForAccountIDResponse, error) {
	out := new(GetEmailAddressesForAccountIDResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.account.v1.AccountService/GetEmailAddressesForAccountID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
type AccountServiceServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	CreateEmailAddress(context.Context, *CreateEmailAddressRequest) (*CreateEmailAddressResponse, error)
	ConfirmEmailAddress(context.Context, *ConfirmEmailAddressRequest) (*ConfirmEmailAddressResponse, error)
	GetEmailAddresses(context.Context, *GetEmailAddressesRequest) (*GetEmailAddressesResponse, error)
	GetEmailAddressByID(context.Context, *GetEmailAddressByIDRequest) (*GetEmailAddressByIDResponse, error)
	GetEmailAddressesForAccountID(context.Context, *GetEmailAddressesForAccountIDRequest) (*GetEmailAddressesForAccountIDResponse, error)
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.account.v1.AccountService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.account.v1.AccountService/CreateEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateEmailAddress(ctx, req.(*CreateEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ConfirmEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ConfirmEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.account.v1.AccountService/ConfirmEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ConfirmEmailAddress(ctx, req.(*ConfirmEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetEmailAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetEmailAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.account.v1.AccountService/GetEmailAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetEmailAddresses(ctx, req.(*GetEmailAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetEmailAddressByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailAddressByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetEmailAddressByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.account.v1.AccountService/GetEmailAddressByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetEmailAddressByID(ctx, req.(*GetEmailAddressByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetEmailAddressesForAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailAddressesForAccountIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetEmailAddressesForAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.account.v1.AccountService/GetEmailAddressesForAccountID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetEmailAddressesForAccountID(ctx, req.(*GetEmailAddressesForAccountIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alpacalabs.account.v1.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "CreateEmailAddress",
			Handler:    _AccountService_CreateEmailAddress_Handler,
		},
		{
			MethodName: "ConfirmEmailAddress",
			Handler:    _AccountService_ConfirmEmailAddress_Handler,
		},
		{
			MethodName: "GetEmailAddresses",
			Handler:    _AccountService_GetEmailAddresses_Handler,
		},
		{
			MethodName: "GetEmailAddressByID",
			Handler:    _AccountService_GetEmailAddressByID_Handler,
		},
		{
			MethodName: "GetEmailAddressesForAccountID",
			Handler:    _AccountService_GetEmailAddressesForAccountID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alpacalabs/account/v1/api.proto",
}
